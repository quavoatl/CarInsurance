// <auto-generated />
using System;
using CarInsurance.NewDataAccess.CarInsuranceDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarInsurance.NewDataAccess.Migrations
{
    [DbContext(typeof(CarInsuranceContext))]
    [Migration("20200914080241_updatekeys")]
    partial class updatekeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.BrokerPolicyTemplate", b =>
                {
                    b.Property<Guid>("BrokerReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<bool>("TemplateReady")
                        .HasColumnType("bit");

                    b.HasKey("BrokerReferenceId");

                    b.ToTable("BrokerPolicyTemplate");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid?>("BrokerPolicyTemplateCarBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("EngineCC")
                        .HasColumnType("smallint");

                    b.Property<string>("EuroStandard")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("CarId");

                    b.HasIndex("BrokerPolicyTemplateCarBrokerRefId");

                    b.ToTable("Car");

                    b.HasCheckConstraint("constraint_euroStandard", "`EuroStandard` in ('Euro1','Euro2','Euro3','Euro4','Euro5','Euro6')");

                    b.HasCheckConstraint("constraint_carBrand", "`Brand` in ('volkswagen','bmw','mercedes-benz','opel','dacia','renault','toyota','skoda')");

                    b.HasCheckConstraint("constraint_carEngine", "`EngineCC` > 1000 and `EngineCC` < 5000");

                    b.HasCheckConstraint("constraint_carMode", "`Model` in ('octavia','rapid','fabia','passat','golf','c200','e200','c220','e220','320d','325d','330d','530d','520d','525d','astra','corsa','megane','clio','logan','sandero','avensis','prius')");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.CarRule", b =>
                {
                    b.Property<int>("CarRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CarRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarRuleCoverId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<double>("Multiplier")
                        .HasColumnType("float(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CarRuleId");

                    b.HasIndex("CarRuleCoverId1");

                    b.ToTable("CarRule");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Cover", b =>
                {
                    b.Property<int>("CoverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdditionDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("BrokerPolicyTemplateCoverBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoverBrokerRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LimitCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("CoverId");

                    b.HasIndex("BrokerPolicyTemplateCoverBrokerRefId");

                    b.ToTable("Cover");

                    b.HasCheckConstraint("constraint_coverType", "`Type` in ('theft','accidents','naturalhazard')");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Limit", b =>
                {
                    b.Property<int>("LimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CoverLimitCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverType")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<Guid>("LimitCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LimitRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LimitValues")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("LimitId");

                    b.HasIndex("CoverLimitCoverId");

                    b.ToTable("Limit");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.LimitRule", b =>
                {
                    b.Property<int>("LimitRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("LimitRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LimitRuleCoverId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("RuleText")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("LimitRuleId");

                    b.HasIndex("LimitRuleCoverId1");

                    b.ToTable("LimitRule");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Question", b =>
                {
                    b.Property<Guid>("QuestionCoverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverQuestionCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverType")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<Guid>("QuestionRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("QuestionCoverId");

                    b.HasIndex("CoverQuestionCoverId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.QuestionRule", b =>
                {
                    b.Property<Guid>("QuestionRuleCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("RuleText")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("QuestionRuleCoverId");

                    b.ToTable("QuestionRule");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Car", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.BrokerPolicyTemplate", "BrokerPolicyTemplate")
                        .WithMany("Car")
                        .HasForeignKey("BrokerPolicyTemplateCarBrokerRefId")
                        .HasConstraintName("FK_CarType")
                        .HasPrincipalKey("CarBrokerRefId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.CarRule", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.Car", "Car")
                        .WithMany("CarRule")
                        .HasForeignKey("CarRuleCoverId1")
                        .HasConstraintName("FK_CarRuleType")
                        .HasPrincipalKey("CarRuleCoverId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Cover", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.BrokerPolicyTemplate", "BrokerPolicyTemplate")
                        .WithMany("Cover")
                        .HasForeignKey("BrokerPolicyTemplateCoverBrokerRefId")
                        .HasConstraintName("FK_CoverType")
                        .HasPrincipalKey("CoverBrokerRefId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Limit", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.Cover", "Cover")
                        .WithMany("Limit")
                        .HasForeignKey("CoverLimitCoverId")
                        .HasConstraintName("FK_LimitType")
                        .HasPrincipalKey("LimitCoverId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.LimitRule", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.Limit", "Limit")
                        .WithMany("LimitRule")
                        .HasForeignKey("LimitRuleCoverId1")
                        .HasConstraintName("FK_LimitRuleType")
                        .HasPrincipalKey("LimitRuleCoverId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.Question", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.Cover", "Cover")
                        .WithMany("Question")
                        .HasForeignKey("CoverQuestionCoverId")
                        .HasConstraintName("FK_QuestionType")
                        .HasPrincipalKey("QuestionCoverId");
                });

            modelBuilder.Entity("CarInsurance.NewDataAccess.DbModels.QuestionRule", b =>
                {
                    b.HasOne("CarInsurance.NewDataAccess.DbModels.Question", "Question")
                        .WithOne("QuestionRule")
                        .HasForeignKey("CarInsurance.NewDataAccess.DbModels.QuestionRule", "QuestionRuleCoverId")
                        .HasConstraintName("FK_QuestionRuleType")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
